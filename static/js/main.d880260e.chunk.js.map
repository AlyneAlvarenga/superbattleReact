{"version":3,"sources":["Components/ModalComp.js","Components/Header.js","Components/SelectHeroes.js","Components/BattleCondition.js","Components/Dropdown.js","Components/Winner.js","App.js","serviceWorker.js","index.js"],"names":["ModalComp","useState","open","setOpen","handleClose","modalBody","className","onClick","Modal","onClose","Header","props","displayResults","SelectHeroes","classes","makeStyles","select","backgroundColor","borderBottom","icon","fill","useStyles","FormControl","variant","NativeSelect","style","width","fontSize","color","fontWeight","name","onChange","handleChange","disabled","value","superheroData","map","obj","key","id","Provider","BattleCondition","disableBattle","Dropdown","handleSuperheroChange","disableSuperhero1","disableSuperhero2","handleBattleChange","chosenBattle","action","Winner","superhero1","superhero2","percentages","resetGame","toUpperCase","src","image","url","alt","viewBox","xmlns","cx","cy","r","strokeDasharray","d","powerstats","App","setDisplayResults","setSuperheroData","setSuperhero1","setSuperhero2","setDisableSuperhero1","setDisableSuperhero2","setDisableBattle","setChosenBattle","setPercentages","useEffect","idArr","Promise","all","axios","method","responseType","params","reqUrl","proxyHeaders","xmlToJSON","then","response","objectArray","forEach","res","push","data","hero1","parseInt","hero2","getPercentages","event","chosenHero","find","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d880260e.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { Modal } from '@material-ui/core';\nimport './ModalComp.css';\n\nconst ModalComp = () => {  \n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  const modalBody = (\n    <div className=\"ModalComp-modalBody\">\n      <h2>Instructions</h2>\n      <ol>\n        <li>Select one champion from each list;</li>\n        <li>Select a condition of battle;</li>\n        <li>See who the winner is!</li>\n      </ol>\n      <button onClick={handleClose}>Close Instructions</button>\n    </div>\n  );\n  \n  return (\n    <>\n      <button onClick={handleOpen}>See Instructions</button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n      >\n        {modalBody}\n      </Modal>\n    </>\n  )\n}\n\nexport default ModalComp;","import React from 'react';\nimport ModalComp from './ModalComp';\nimport './Header.css';\n\nconst Header = (props) => {\n  return (\n    <header className={props.displayResults ? 'Header-results' : 'Header-main'}>\n      <h1>Super Battle!</h1>\n      {\n        props.displayResults \n          ? null\n          : <ModalComp />\n      }\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport { NativeSelect } from '@material-ui/core';\nimport { FormControl } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { MdArrowUpward } from 'react-icons/md';\nimport { IconContext } from \"react-icons\";\nimport './SelectHeroes.css';\n\nconst SelectHeroes = (props) => {\n  const styles = {\n    width: \"230px\",\n    fontSize: \"1.6rem\",\n    color: \"white\",\n    fontWeight: \"bold\"\n  }\n\n  const useStyles = makeStyles({\n    select: {\n      \"& option\": {\n        backgroundColor: \"black\"\n      },\n      \"&:before\": {\n        // normal\n        borderBottom: \"1px solid white\"\n      },\n      \"&:after\": {\n        // focused\n        borderBottom: `1px solid gold`\n      },\n      \"&:hover:not(.Mui-disabled):not(.Mui-focused):not(.Mui-error):before\": {\n        // hover\n        borderBottom: `2px solid gold`\n      }\n    },\n    icon: {\n      fill: \"white\"\n    },\n  });\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"SelectHeroes-container\">\n      <FormControl variant=\"outlined\">\n        <NativeSelect style={styles} name=\"\" onChange={props.handleChange} disabled={props.disabled ? true : null} className={classes.select} classes={{\n          icon: classes.icon\n        }}>\n            <option value=\"\">Choose Your Champion</option>\n          {\n            props.superheroData.map(obj => {\n              return <option key={obj.id} value={obj.id}>{obj.name}</option>\n            })\n          }\n        </NativeSelect>\n      </FormControl>\n      {\n        props.disabled \n          ? null\n          : \n          <div>\n            <IconContext.Provider value={{ className: \"arrow\"}}>\n              <MdArrowUpward />\n            </IconContext.Provider>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default SelectHeroes;","import React from 'react';\nimport { NativeSelect } from '@material-ui/core';\nimport { FormControl } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { MdArrowUpward } from 'react-icons/md';\nimport { IconContext } from \"react-icons\";\nimport './BattleCondition.css';\n\nconst BattleCondition = ({handleChange, disableBattle}) => {\n  const styles = {\n    width: \"230px\",\n    fontSize: \"1.6rem\",\n    color: \"white\",\n    fontWeight: \"bold\"\n  }\n\n  const useStyles = makeStyles({\n    select: {\n      \"& option\": {\n        backgroundColor: \"black\"\n      },\n      \"&:before\": {\n        // normal\n        borderBottom: \"1px solid white\"\n      },\n      \"&:after\": {\n        // focused\n        borderBottom: `1px solid gold`\n      },\n      \"&:hover:not(.Mui-disabled):not(.Mui-focused):not(.Mui-error):before\": {\n        // hover\n        borderBottom: `2px solid gold`\n      }\n    },\n    icon: {\n      fill: \"white\"\n    },\n  });\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"BattleCondition-container\">\n      <FormControl variant=\"filled\" >\n        <NativeSelect style={styles} name=\"\" id=\"\" onChange={handleChange} className={classes.select} classes={{\n          icon: classes.icon\n        }} disabled={disableBattle}>\n          <option value=\"\">Battle Condition</option>\n          <option value=\"intelligence\">Battle of Intelligence</option>\n          <option value=\"speed\">Battle of Speed</option>\n          <option value=\"combat\">Battle of Combat</option>\n          <option value=\"strength\">Battle of Strength</option>\n          <option value=\"power\">Battle of Power</option>\n        </NativeSelect>\n      </FormControl>\n      {\n        disableBattle\n          ? null\n          :\n          <div>\n            <IconContext.Provider value={{ className: \"arrow\" }}>\n              <MdArrowUpward />\n            </IconContext.Provider>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default BattleCondition;","import React from 'react';\nimport SelectHeroes from './SelectHeroes';\nimport BattleCondition from './BattleCondition';\nimport './Dropdown.css';\n\n\nconst Dropdown = ({ superheroData, handleSuperheroChange, disableSuperhero1, disableSuperhero2, handleBattleChange, chosenBattle, disableBattle }) => {\n\n  return (\n    <form action=\"\">\n      <div className=\"Dropdown-heroesContainer\">\n        <SelectHeroes superheroData={superheroData} handleChange={handleSuperheroChange} disabled={disableSuperhero1} />\n        <SelectHeroes superheroData={superheroData} handleChange={handleSuperheroChange} disabled={disableSuperhero2} />\n      </div>\n      <div className=\"Dropdown-battleContainer\">\n        <BattleCondition handleChange={handleBattleChange} chosenBattle={chosenBattle} disableBattle={disableBattle} />\n      </div>\n    </form>\n  )\n}\n\nexport default Dropdown;","import React from 'react';\nimport './Winner.css';\n\nconst Winner = ({superhero1, superhero2, chosenBattle, percentages, resetGame}) => {\n\n  const whoIsWinner = () => {\n    if (percentages[0] > percentages[1]) {\n      return superhero1[0].name;\n    } else if (percentages[0] < percentages[1]) {\n      return superhero2[0].name;\n    } else if (percentages[0] === percentages[1]) {\n      return `Both! It's a tie!`;\n    }\n\n  }\n\n  return (\n    <section>\n      <h2>The winner of the Battle of <span className=\"Winner-fontSpan\">{chosenBattle.toUpperCase()}</span> is... <span className=\"Winner-fontSpan\">{whoIsWinner().toUpperCase()}</span>!</h2>\n      <div className=\"Winner-resultsContainer\">\n        <div className=\"Winner-heroContainer\">\n          <h3>{superhero1[0].name}</h3>\n          <div className=\"Winner-imgCircleContainer\">\n            <div className=\"Winner-imgContainer\">\n              <img src={superhero1[0].image.url} alt={superhero1[0].name} className={percentages[0] > percentages[1] ? null : 'Winner-grayscale'} />\n            </div>\n            <div className=\"Winner-circleContainer\">\n              <svg className=\"svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g className=\"Winner-svgGroup\">\n                  <circle className=\"Winner-baseCircle\" cx=\"50\" cy=\"50\" r=\"45\" />\n                  <path className=\"Winner-secondCircle\" strokeDasharray={`${percentages[0]} 283`} d=\"\n                      M 50, 50\n                      m -45, 0\n                      a 45,45 0 1,0 90,0\n                      a 45,45 0 1,0 -90,0\"></path>\n                </g>\n              </svg>\n              <span className=\"Winner-circleLabel\">{`${superhero1[0].powerstats[chosenBattle]}%`}</span>\n            </div>\n          </div>\n        </div>\n        {/* ./heroContainer */}\n        <div className=\"Winner-heroContainer\">\n          <h3>{superhero2[0].name}</h3>\n          <div className=\"Winner-imgCircleContainer\">\n            <div className=\"Winner-imgContainer\">\n              <img src={superhero2[0].image.url} alt={superhero2[0].name} className={percentages[1] > percentages[0] ? null : 'Winner-grayscale'} />\n            </div>\n            <div className=\"Winner-circleContainer\">\n              <svg className=\"svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g className=\"Winner-svgGroup\">\n                  <circle className=\"Winner-baseCircle\" cx=\"50\" cy=\"50\" r=\"45\" />\n                  <path className=\"Winner-secondCircle\" strokeDasharray={`${percentages[1]} 283`} d=\"\n                      M 50, 50\n                      m -45, 0\n                      a 45,45 0 1,0 90,0\n                      a 45,45 0 1,0 -90,0\"></path>\n                </g>\n              </svg>\n              <span className=\"Winner-circleLabel\">{`${superhero2[0].powerstats[chosenBattle]}%`}</span>\n            </div>\n          </div>\n        </div> \n        {/* /.heroContainer */}\n      </div>\n      {/* /.resultsContainer */}\n      <div className=\"Winner-resetContainer\">\n        <button onClick={resetGame}>Try Again</button>\n      </div>\n    </section>\n  )\n}\n\nexport default Winner;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Header from './Components/Header';\nimport Dropdown from './Components/Dropdown';\nimport Winner from './Components/Winner';\n\nfunction App() {\n  const [displayResults, setDisplayResults] = useState(false);\n\n  const [superheroData, setSuperheroData] = useState([]);\n  const [superhero1, setSuperhero1] = useState('');\n  const [superhero2, setSuperhero2] = useState('');\n  const [disableSuperhero1, setDisableSuperhero1] = useState(false);\n  const [disableSuperhero2, setDisableSuperhero2] = useState(true);\n  const [disableBattle, setDisableBattle] = useState(true);\n  const [chosenBattle, setChosenBattle] = useState('');\n\n  const [percentages, setPercentages] = useState([]);\n\n  // 30, 35, 38, 61, 69, 95, 106, 107, 127, 149, 157, 162, 176, 208, 213, 226, 275, 278, 289, 303, 313, 332, 346, 370, 374, 405, 410, 414, 418, 423, 487\n  useEffect(() => {\n    const superheroIds = [18, 30, 35, 38, 61, 69, 95, 106, 107, 127, 149, 157, 162, 176, 208, 213, 226, 275, 278, 289, 303, 313, 332, 346, 370, 374, 405, 410, 414, 418, 423, 487];\n\n    const getAllSuperheroes = (idArr) => {\n      return Promise.all(idArr.map(id => {\n        return axios({\n          method: 'GET',\n          url: 'https://proxy.hackeryou.com',\n          responseType: 'json',\n          params: {\n            reqUrl: `https://superheroapi.com/api/2827401063977440/${id}`,\n            proxyHeaders: {\n              'header_params': 'value'\n            },\n            xmlToJSON: false,\n          }\n        })\n      })).then(response => {\n        const objectArray = [];\n        response.forEach(res => {\n          objectArray.push(res.data);\n        })\n        setSuperheroData(objectArray);\n\n      })\n    }\n    getAllSuperheroes(superheroIds);\n\n  }, []);\n\n  const handleSuperheroChange = (event) => {\n    const chosenHero = [];\n\n    superheroData.find(obj => {\n      return obj.id === event.target.value ? chosenHero.push(obj) : null\n    })\n\n    if (superhero1 === '') {\n      setSuperhero1(chosenHero);\n      setDisableSuperhero1(true);\n      setDisableSuperhero2(false);\n    } else {\n      setSuperhero2(chosenHero);\n      setDisableSuperhero2(true);\n      setDisableBattle(false);\n    }\n  }\n\n  const handleBattleChange = (event) => {\n    setChosenBattle(event.target.value);\n    setDisplayResults(true);\n  }\n\n  useEffect(() => {\n    const getPercentages = () => {\n      const hero1 = parseInt(superhero1[0].powerstats[chosenBattle]);\n    \n      const hero2 = parseInt(superhero2[0].powerstats[chosenBattle]);\n\n      const percentageHero1 = hero1 * 283 / 100;\n      const percentageHero2 = hero2 * 283 / 100;\n  \n      setPercentages([percentageHero1, percentageHero2]);\n    }\n\n    if (chosenBattle) {\n      getPercentages();\n    }\n\n  }, [chosenBattle, superhero1, superhero2])\n\n\n  const resetGame = () => {\n    setDisplayResults(false);\n    setSuperhero1('');\n    setSuperhero2('');\n    setDisableSuperhero1(false);\n    setDisableSuperhero2(true);\n    setDisableBattle(true);\n    setChosenBattle('');\n    setPercentages([]);\n  }\n\n  return (\n    <div className=\"App-container\">\n      <Header \n        displayResults={displayResults}\n      />\n      {\n        !displayResults ?\n          <Dropdown \n            superheroData={superheroData}\n            handleSuperheroChange={handleSuperheroChange}\n            disableSuperhero1={disableSuperhero1}\n            disableSuperhero2={disableSuperhero2}\n            handleBattleChange={handleBattleChange}\n            chosenBattle={chosenBattle}\n            disableBattle={disableBattle}\n          />\n          : \n          <Winner \n            superhero1={superhero1}\n            superhero2={superhero2}\n            chosenBattle={chosenBattle}\n            percentages={percentages}\n            resetGame={resetGame}\n          />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}